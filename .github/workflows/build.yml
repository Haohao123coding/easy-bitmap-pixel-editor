name: Build on Release

on:
  release:
    types: [published, edited]  # 发布或编辑 Release 时触发
  workflow_dispatch:  # 添加手动触发，方便测试

jobs:
  build-multi-platform:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Ubuntu/Linux 配置
          - os: ubuntu-latest
            asset_name: ebpe-linux
            compile_command: g++ ebpe.cpp -o ebpe -O2 -std=c++14 -static
            output_path: ./ebpe
            file_type: application/octet-stream
          
          # Windows 配置
          - os: windows-latest
            asset_name: ebpe-windows.exe
            compile_command: g++ ebpe.cpp -o ebpe.exe -O2 -std=c++14 -static
            output_path: ./ebpe.exe
            file_type: application/x-msdownload

    steps:
      # 步骤 1: 获取代码
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}  # 检出 Release 对应的 tag
      
      # 调试信息：检查代码是否正确检出
      - name: Debug - Verify checkout
        run: |
          echo "📋 检出后的文件列表:"
          ls -la
          echo "🔍 检查 ebpe.cpp 是否存在:"
          if [ -f "ebpe.cpp" ]; then
            echo "✅ ebpe.cpp 存在"
            echo "📄 文件前几行:"
            head -5 ebpe.cpp
          else
            echo "❌ ebpe.cpp 不存在！"
            echo "当前目录内容:"
            ls -la
            exit 1
          fi

      # 步骤 2: 设置编译环境
      - name: Setup build environment
        run: |
          echo "Building for $RUNNER_OS..."
          echo "Release tag: ${{ github.event.release.tag_name }}"
          
          # 根据不同系统安装依赖
          if [ "$RUNNER_OS" = "Linux" ]; then
            sudo apt update
            sudo apt install -y g++ build-essential
          elif [ "$RUNNER_OS" = "Windows" ]; then
            choco install mingw -y
            echo "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin" >> $GITHUB_PATH
          fi

      # 步骤 3: 显示编译器信息
      - name: Show compiler version
        run: |
          g++ --version || echo "g++ not available"
          which g++ || echo "g++ not found in PATH"

      # 步骤 4: 编译项目
      - name: Compile project
        run: ${{ matrix.compile_command }}
        
      # 步骤 5: 验证生成的文件
      - name: Verify binary
        run: |
          if [ -f "${{ matrix.output_path }}" ]; then
            echo "✅ Build successful!"
            ls -la "${{ matrix.output_path }}"
            file "${{ matrix.output_path }}" || echo "File command not available"
          else
            echo "❌ Build failed - output file not found"
            ls -la ./
            exit 1
          fi

      # 步骤 6: 上传编译好的文件到 Release
      - name: Upload to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}  # 使用 Release 提供的上传URL
          asset_path: ${{ matrix.output_path }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: ${{ matrix.file_type }}

      # 步骤 7: 显示完成信息
      - name: Completion message
        run: |
          echo "🎉 Build completed for $RUNNER_OS"
          echo "📦 Asset uploaded: ${{ matrix.asset_name }}"
          echo "🏷️ Release: ${{ github.event.release.name }}"
